ts-node-dev : faz o papel do tsc e do nodemon

Persistência <-> Repositório <-> Rota

Regra de negócio: Quando é algo muito específico da aplicação
por exemplo, verificação por data se já tem agendamento naquela hora
essas coisas.

Redis para Cache: é basicamente uma tabela com duas colunas (chave, valor)
docker run --name redis -p 6379:6379 -d -t redis:alpine

Amazon S3 = CDN (Content Delivery Network) -> Ambiente de desenvolvimento
Escala Vertical - Aumenta os recursos (memoria etc)
Escala horizontal - Cria um novo servidor e roda em dois servidores diferentes, por exemplo

- Utiliza o typeorm
- Utiliza o postgres (cria o docker e usa o dbeaver)

Class-transformer, para mudar as classes antes de enviar ou fazer requisição (como tirar o password do json, por exemplo)

Celebrate -> para fazer validação

yarn jest --clearCache (para limpar o cache dos testes)

Container do mongodb:
docker run --name mongodb -p 27017:27017 -d -t mongo

yarn typeorm migration:create -n CreateAppointments (comando para criar Migrations)

Amazon SES para envio de email

Para executar as migrations:
yarn typeorm migration:run

Para desfazer a migration:
yarn typeorm migration:revert

LEMBRAR DE IMPROTAR O REFLECT-METADATA

Middleware de upload de arquivos: Multer

OBS: No typescript quando a lib fica vermelha, basta:
yarn add -D @types/lib

express-async-errors

-----------------------------------

DDD DOmain Driven Design
TDD Test Driven Development (criar os testes antes)
SCRUM: Metodologia Ágil

O que for compartilhado entre mais de um módulo, coloca dentro de Shared

Na camada de infra, tudo que nós teríamos problemas ao trocarmos as tecnologias
colocamos lá.

Test Coverage: Para ajudar a saber se já criou testes demais ou falta algo a ser testado
